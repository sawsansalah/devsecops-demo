pipeline {
  agent {
    kubernetes {
      yamlFile 'build-agent.yaml'
      defaultContainer 'maven'
      idleMinutes 0  // Terminate immediately after build
    }
  }

  environment {
    KANIKO_CMD = "--dockerfile=Dockerfile --context=\$WORKSPACE --destination=docker.io/3788/dso-demo:latest --cache=true --skip-tls-verify"
  }

  stages {
    stage('Build') {
      steps {
        container('maven') {
          sh 'mvn compile'
        }
      }
    }

    stage('Testing') {
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
    }

    stage('SCA') {
      steps {
        container('maven') {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh 'mvn org.owasp:dependency-check-maven:check'
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'target/dependency-check-report.html', fingerprint: true
        }
      }
    }

    stage('SAST') {
      steps {
        container('slscan') {
          sh 'scan --type java,depscan --build'
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
        }
      }
    }

    stage('Package') {
      steps {
        container('maven') {
          sh 'mvn package -DskipTests'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        container('kaniko') {
          sh "/kaniko/executor ${KANIKO_CMD}"
        }
      }
    }
  }
}